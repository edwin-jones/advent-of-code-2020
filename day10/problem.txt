Take input as list of numbers and sort. Append last + 3 to end of set, append 0 to start.
Go through set, finding differences between numbers. Count instances of differences of 1.
Count instances of differences of 3. Multiply these sums and return the result.

THEN

Figure out how many combinations can exist of the input by removing items
where no difference between remaining items is greater than 3. 
The start is always 0 and the end is always the last number of input.txt + 3.

From the output/debugging of part 1, we can see that the difference between inputs is always 1 or 3.
We can ignore differences of 3 in the sequence for this caculation as those can't be removed
according to the rules defined above.

Count how many sequences of differences of 1 appear in the input. 
Group them by how many differences of 1 are in a row.
An input of 0125 would contain one sequence of two consecutive 1s.
Assign a score to each sequence. A run of 2 = 2, a run of 3 = 4 and a run of 4 = 7.
This is because sequences can be broken down like this:

(1,2,5): one sequence of 1s in a row. nothing can be removed, so it has 0 combinations

(1,2,3,6): two sequences of 1s in a row has 2 combinations:
(1,2,3,6)
(1,3,6)

(1,2,3,4,7): three sequences of 1s in a row has 4 combinations:
(1,2,3,4,7)
(1,3,4,7)
(1,2,4,7)
(1,4,7)

(1,2,3,4,5,8): three sequences of 1s in a row has 7 combinations:
(1,2,3,4,5,8)
(1,3,4,5,8)
(1,2,4,5,8)
(1,2,3,5,8)
(1,3,5,8)
(1,2,5,8)
(1,4,5,8)

so result is the scores of all these sequences multiplied through. In the sequence below:
(0), 1, 4, 5, 6, 7, 10, 11, 12, 15, 16, 19, (22)

There is one sequence of 3 and one of 2 which becomes 4 * 2 = 8 possible sequences.